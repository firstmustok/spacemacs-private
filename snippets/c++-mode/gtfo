#name : Generate Tfo template
# key: gtfo
# expand-env: ((yas-indent-line 'fixed))
# --
#include "tfo.h"

using namespace std;
using namespace stock;

namespace stock{

class ${1:`(mapconcat 'capitalize (cons "C" (split-string (file-name-nondirectory (file-name-sans-extension (buffer-file-name))) "_")) "")`} : public ITfo
{
public:
    $1(${2:});
    virtual ~$1();

    virtual DWORD initialize(CParaStream&) ;

    virtual DWORD open(DWORD foid, float price);
    virtual DWORD build(DWORD foid, float price, ITrade* pIns);
    virtual DWORD buy(DWORD foid, float price, ITrade* pIns);
    virtual DWORD sell(DWORD foid, float price, ITrade* pIns);
    virtual DWORD empty(DWORD foid, float price, ITrade* pIns);
    virtual DWORD lower(DWORD foid, float price, ITrade* pIns);
    virtual DWORD clear(DWORD foid, float price, ITrade* pIns);

    //global filter for all, even no instance created.
    virtual DWORD filter(DWORD dwfoid, DWORD dwStockId, StockOP op, void* data);

    //filter for each trade instance.
    virtual DWORD filter(DWORD dwfoid, DWORD dwStockId, StockOP op, ITrade* pIns, void* data);

    //create trade instance for database initialization.
    virtual ITrade* createInstance(DWORD dwStockId);

    //create trade instance for pfo events.
    virtual ITrade* createInstance(DWORD dwStockId, Object* obj);

private:
	${0:/* data */}
};

} /*end stock */


$1::$1()
{
}

$1::~$1()
{
}

DWORD $1::initialize(CParaStream& param)
{
    if(1 > para.getCount())
    {
        SLOG_ERROR("Initialize dfo param error, not enough data!");
        return ERR_FAILURE;
    }
    int resultLen;
    para >> resultLen;

    return ERR_SUCCESS;
}

DWORD $1::open(DWORD foid, float price)
{
    return ERR_SUCCESS;
}

DWORD $1::build(DWORD foid, float price, ITrade* pIns)
{
    return ERR_SUCCESS;
}

DWORD $1::buy(DWORD foid, float price, ITrade* pIns)
{
    return ERR_SUCCESS;
}

DWORD $1::sell(DWORD foid, float price, ITrade* pIns)
{
    return ERR_SUCCESS;
}

DWORD $1::empty(DWORD foid, float price, ITrade* pIns)
{
    return ERR_SUCCESS;
}

DWORD $1::lower(DWORD foid, float price, ITrade* pIns)
{
    return ERR_SUCCESS;
}

DWORD $1::clear(DWORD foid, float price, ITrade* pIns)
{
    return ERR_SUCCESS;
}

//global filter for all, even no instance created.
DWORD $1::filter(DWORD dwfoid, DWORD dwStockId, StockOP op, void* data)
{
    return ERR_SUCCESS;
}

//filter for each trade instance.
DWORD $1::filter(DWORD dwfoid, DWORD dwStockId, StockOP op, ITrade* pIns, void* data);
{
    return ERR_SUCCESS;
}

//create trade instance for database initialization.
ITrade* $1::createInstance(DWORD dwStockId)
{
    return NULL;
}

//create trade instance for pfo events.
ITrade* $1::createInstance(DWORD dwStockId, Object* obj)
{
    return NULL;
}

ASTS_PLUGIN_INIT(stock::$1, "tfo description", "version 1.0");

//period : PLUGIN_FIVE_MIN, PLUGIN_HALF_HOURLY, PLUGIN_HOURLY, PLUGIN_DAILY, PLUGIN_WEEKLY, 
//ASTS_PLUGIN_INIT_PERIOD(stock::$1, PLUGIN_DAILY, "dfo description", "version 1.0");

